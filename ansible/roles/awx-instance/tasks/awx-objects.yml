# Set up Django objects used by AWX.

- tags: always
  include_vars: "secrets-{{ ansible_oc_namespace }}.yml"

- name: "Clean up obsolete objects (from AWX 15.0.1)"
  awx_script:
    script: |
      {{ lookup("template", "awx_script_lib.py") }}
      from awx.main.models.ha import InstanceGroup
      from awx.main.models.inventory import CustomInventoryScript
      from awx.main.models.credential import Credential

      # Do *not* delete the “WWP” project! That would cascade into deleting
      # the entire history. (Ask me how I know, or how said history got purged
      # on the test instance...)

      CustomInventoryScript.objects.all().delete()

      for g in InstanceGroup.objects.all():
        if g.name not in ('controlplane', 'default'):
          g.delete()

      for cred in Credential.objects.all():
        if "wwp" in cred.name or "WWP" in cred.name:
          cred.delete()

- name: "`{{ awx_project_name }}` project"
  awx_script:
    supports_check_mode: yes
    script: |
      {{ lookup("template", "awx_script_lib.py") }}

      from awx.main.models.organization import Organization
      from awx.main.models.projects import Project
      with AnsibleGetOrCreate(Organization, name="{{ awx_organization_name }}") as org:
          with AnsibleGetOrCreate(Project, name="{{ awx_project_name }}") as prj:
            prj.organization = org
            prj.scm_type = "git"
            prj.scm_url = "{{ awx_project_github_url }}"
            prj.scm_branch = "{{ awx_playbook_branch }}"
            prj.scm_update_on_launch = True

- name: "`{{ awx_inventory_source_name }}` inventory source"
  awx_script:
    supports_check_mode: yes
    script: |
      {{ lookup("template", "awx_script_lib.py") }}

      from awx.main.models.inventory import InventorySource
      from awx.main.models.projects import Project

      project = Project.objects.get(name = "{{ awx_project_name }}")
      with AnsibleGetOrCreate(InventorySource,
                                      name="{{ awx_inventory_source_name }}"
                                     ) as src:
          src.source = 'scm'
          src.source_project = project
          src.source_path = "{{ awx_inventory_source_path }}"
          src.overwrite = True
          src.update_on_launch = True

- name: "`{{ awx_inventory_name }}` inventory"
  awx_script:
    supports_check_mode: yes
    script: |
      {{ lookup("template", "awx_script_lib.py") }}

      from awx.main.models.organization import Organization
      from awx.main.models.inventory import Inventory, InventorySource

      org = Organization.objects.get(name="{{ awx_organization_name }}")
      inv_source = InventorySource.objects.get(name="{{ awx_inventory_source_name }}")

      with AnsibleGetOrCreate(Inventory, name="{{ awx_inventory_name }}") as inv:
        inv.organization = org
        inv.save()
        inv.inventory_sources.set([inv_source])

- name: "Remove the “Demo Job Template” if found"
  awx_script:
    supports_check_mode: yes
    script: |
      from awx.main.models.jobs import JobTemplate
      try:
          jt = JobTemplate.objects.get(name="Demo Job Template")
          jt.delete()
          update_json_status(changed=True)
      except JobTemplate.DoesNotExist:
          update_json_status(changed=False)

- name: "Job template for theme selection"
  awx_script:
    supports_check_mode: yes
    script: |
      {{ lookup("template", "job-templates-create.py") }}

      kwarg = dict(
          job_name = "Set up theme to sites",
          job_description = "Apply the theme defined in the inventory to sites",
          job_tags = "themes",
          job_type = "run",
          job_schedule_name = "Set up the theme on WP sites every thursday",
          job_schedule_rrule = "DTSTART:20220305T120829Z RRULE:FREQ=WEEKLY;BYDAY=TH",
      )

      update_json_status(changed=get_or_create_job_template(**kwarg))

- name: "Job template for aligning sites"
  awx_script:
    supports_check_mode: yes
    script: |
      {{ lookup("template", "job-templates-create.py") }}

      kwarg = dict(
          job_name = "Align sites",
          job_description = "Revert any changes manualy applied to sites that were not included as a standard",
          job_tags = "config,plugins,symlink",
          job_type = "run",
          job_schedule_name = "Align sites during Wagon's day",
          job_schedule_rrule = "DTSTART:20220305T120829Z RRULE:FREQ=WEEKLY;BYDAY=TH",
      )

      update_json_status(changed=get_or_create_job_template(**kwarg))

- name: "Tweaked `default` InstanceGroup"
  awx_script:
    supports_check_mode: yes
    script: |
      {{ lookup("template", "awx_script_lib.py") }}
      from awx.main.models.ha import InstanceGroup

      # We *should not* create the InstanceGroup here - Rather, we
      # want `-t awx.seed` to take care of that, so that it may put in
      # all the required bells and whistles:
      InstanceGroup.objects.get(name="default")

      # Still, we want to use `AnsibleGetOrCreate` for its
      # `supports_check_mode` goodness:
      with AnsibleGetOrCreate(InstanceGroup, name="default") as grp:
        grp.pod_spec_override = """
      spec:
        containers:
          - name: worker
            imagePullPolicy: Always
            volumeMounts:
            - name: wp-nfs
              mountPath: "/srv"
            envFrom:
            - secretRef:
                name: backup-rw-credentials
        volumes:
          - name: wp-nfs
            persistentVolumeClaim:
              claimName: wordpress-0
      """

- name: "job template for backups"
  awx_script:
    supports_check_mode: yes
    script: |
      {{ lookup("template", "awx_script_lib.py") }}

      from awx.main.models.jobs import JobTemplate
      from awx.main.models.inventory import Inventory
      from awx.main.models.projects import Project
      from awx.main.models.ha import InstanceGroup
      from awx.main.models.schedules import Schedule

      default_instance_group = InstanceGroup.objects.get(name="default")

      with AnsibleGetOrCreate(JobTemplate, name="Backup") as jt:
          jt.description = "Backup"
          jt.job_type = "run"
          jt.inventory = Inventory.objects.get(name="{{ awx_inventory_name }}")
          jt.project = Project.objects.get(name="{{ awx_project_name }}")
          jt.playbook = "ansible/playbooks/wordpress-main.yml"
          jt.job_tags = "wp.backup"
          jt.limit = "prod_wordpresses:!prod_sandbox" # Backup all wordpresses exclude sandbox (archive sites)
          jt.save()
          # This used to be just
          # `jt.instance_groups.set([default_instance_group])`, but
          # that doesn't work anymore because
          # https://github.com/ansible/awx/issues/14126 :
          for ig in jt.instance_groups.all():
              jt.instance_groups.remove(ig)
          jt.instance_groups.add(default_instance_group)

          with AnsibleGetOrCreate(Schedule, name="Backup nightly") as s:
                s.unified_job_template = jt
                s.rrule = "DTSTART;TZID=Europe/Berlin:20201003T222222 RRULE:FREQ=DAILY;INTERVAL=1"

# Set up notification templates in AWX.

- name: "Job notification template (email)"
  awx_script:
    supports_check_mode: yes
    script: |
      {{ lookup("template", "awx_script_lib.py") }}

      from awx.main.models.notifications import NotificationTemplate
      from awx.main.models.organization import Organization

      with AnsibleGetOrCreate(NotificationTemplate, name="email-wwp-dev") as nt:
        nt.description = "Notifications by email to wwp devs"
        nt.organization = Organization.objects.get(name="{{ awx_organization_name }}")
        # nt.notification_configuration['username'] = "{{ awx_notifications.email.username }}"
        # nt.notification_configuration['password'] = "{{ awx_notifications.email.password | eyaml(eyaml_keys) }}"
        nt.notification_type = 'email'
        nt.notification_configuration['host'] = 'mail.epfl.ch'
        nt.notification_configuration['recipients'] = ['nicolas.borboen@epfl.ch']
        nt.notification_configuration['sender'] = 'noreply+awx-notifications@epfl.ch'
        nt.notification_configuration['port'] = 25
        nt.notification_configuration['timeout'] = 30
        # nt.notification_configuration['use_ssl'] = True
        # nt.notification_configuration['use_tls'] = False
        nt.save()
