# Kubernetes configuration for production-related images and their builds
#
# Builds happen in the wwp-test namespace *only.* The images are then
# promoted using `oc tag` or an equivalent API call.
#
# See also continuous-integration.yml (which has its own set of images)

- include_vars: ../../../vars/image-vars.yml
  tags: always

- tags: always
  when: openshift_namespace == 'wwp-test'
  include_vars: "{{ item }}"
  with_items:
    - secrets-wwp-test.yml
    - ../../../vars/secrets-wwp-test.yml

- name: "Docker Hub credentials"
  when: not openshift_is_production
  openshift:
    apiVersion: v1
    kind: Secret
    metadata:
      name: docker-hub-credentials
      namespace: '{{ openshift_namespace }}'
    type: kubernetes.io/dockerconfigjson
    data:
      .dockerconfigjson: "{{ _docker_auths_dict | to_json | b64encode }}"
  vars:
    _docker_auths_dict:
      # https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      auths:
        "https://index.docker.io/v1/":
          "auth": "{{ _loginpassword | b64encode }}"
    _loginpassword: >-
      {{ "%s:%s" % (_login, _password) }}
    _login: "{{ build.docker_hub.username }}"
    _password: "{{ build.docker_hub.password | eyaml(eyaml_keys) }}"
  tags: images.secret

- name: "Testing ImageStreams and their build information"
  when: not openshift_is_production
  openshift_imagestream:
    name: "{{ item.name }}"
    namespace: "{{ openshift_namespace }}"
    metadata: "{{ item.metadata | default({}) }}"
    from: "{{ item.from | default(None) }}"
    git:
        repository: "{{ wp_ops_git_uri }}"
        path: "{{ item.git_path }}"
        ref: "{{ images_build_branch }}"
    strategy: "{{ item.strategy | default({}) }}"
  with_items:
    - name: "{{ wp_base_image_name }}"
      git_path: docker/wp-base
      strategy:
        dockerStrategy:
          forcePull: true
          noCache: true
          buildArgs:
            - name: GITHUB_API_USER
              value: "{{ github_api_token.user }}"
            - name: GITHUB_API_TOKEN
              value: "{{ github_api_token.token | eyaml(eyaml_keys) }}"
            - name: INSTALL_AUTO_FLAGS
              value: >-
                --s3-endpoint-url={{ build.s3_assets.endpoint_url }}
                --s3-region={{       build.s3_assets.region }}
                --s3-bucket-name={{  build.s3_assets.bucket_name }}
                --s3-key-id={{       build.s3_assets.key_id }}
                --s3-secret={{       build.s3_assets.secret | eyaml(eyaml_keys) }}
                --manifest-url=https://raw.githubusercontent.com/epfl-si/wp-ops/{{ images_build_branch }}/ansible/roles/wordpress-instance/tasks/plugins.yml
    - name: "{{ httpd_image_name }}"
      git_path: docker/httpd
      from: "{{ wp_base_image_name }}"
    - name: "{{ mgmt_image_name }}"
      git_path: docker/mgmt
      from: "{{ wp_base_image_name }}"
    - name: "{{ backup_cron_image_name }}"
      git_path: docker/cronjob
      from: "{{ mgmt_image_name }}"

- name: "Production ImageStreams"
  when: openshift_is_production
  openshift_imagestream:
    name: "{{ item.name }}"
    namespace: "{{ openshift_namespace }}"
    metadata: "{{ item.metadata | default({}) }}"
  with_items:
    - name: "{{ httpd_image_name }}"
    - name: "{{ mgmt_image_name }}"

- name: "Promote wwp-test images to wwp"
  when: >-
    openshift_is_production and
    ("images.promote" in ansible_run_tags)
  tags: images.promote
  local_action:
    module: shell
    cmd: |
      oc tag wwp-test/mgmt:latest wwp/mgmt:prod
      oc tag wwp-test/mgmt:latest wwp-infra/mgmt:prod
      oc tag wwp-test/httpd:latest wwp/httpd:prod
      oc tag wwp-test/cronjob:latest wwp-infra/cronjob:latest
  # 💡 Other image promotion tasks (besides “core” WordPress) can be
  # found in ../../awx-instance/tasks/main.yml (under tag `-t
  # awx.promote`)
