# Set up one DeploymentConfig/httpd-* object and one Service/httpd-* object, described by the
# {{ dc }} variable.

- include_vars: ../../../vars/image-vars.yml              # For httpd_image_name
  tags: always

- name: "service/httpd-{{ dc.name }}"
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: "httpd-{{ dc.name }}"
      namespace: "{{ openshift_namespace }}"
      labels:
        app: "httpd-{{ dc.name }}"
    spec:
      type: ClusterIP
      sessionAffinity: None
      selector:
        app: "httpd-{{ dc.name }}"
        deploymentconfig: ~
      ports:
        - name: http
          port: 8080
          protocol: TCP
          targetPort: 8080
        - name: https
          port: 8443
          protocol: TCP
          targetPort: 8443
        - name: websvcmetrics
          port: 9980
          protocol: TCP
          targetPort: 9980
        - name: collectd
          port: 9103
          protocol: TCP
          targetPort: 9103
  tags: services

- name: "dc/httpd-{{ dc.name }}"
  openshift:
    state: latest
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: "httpd-{{ dc.name }}"
      namespace: "{{ openshift_namespace }}"
      labels:
        app: "httpd-{{ dc.name }}"
        serving_role: httpd
    spec:
      replicas: "{{ dc.replicaCount | default(DeploymentConfigs.defaults.replicaCount.httpd) }}"
      selector:
        app: "httpd-{{ dc.name }}"
        deploymentconfig: "httpd-{{ dc.name }}"
      template:
        metadata:
          labels:
            app: "httpd-{{ dc.name }}"
            deploymentconfig: "httpd-{{ dc.name }}"
        spec:
          affinity:
            podAntiAffinity:
              # This pod doesn't like running on a VM that has another
              # copy of itself (obviously for HA purposes)
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: deploymentconfig
                    operator: In
                    values:
                    - "httpd-{{ dc.name }}"
                topologyKey: kubernetes.io/hostname

          containers:
          - env:
            - name: WP_ENV
              value: "{{ dc.name }}"
            # image will be set from the imageStream
            imagePullPolicy: Always
            name: "httpd-{{ dc.name }}"
            ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
            - containerPort: 9980
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /ready
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 5
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 1
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: "/srv/{{ dc.name }}"
              name: "volume-wordpress-{{ dc.name }}"
            - mountPath: /webservices/logs
              name: "webservices-logs-{{ dc.name }}"
            - mountPath: /call_logs
              name: "call-logs-{{ dc.name }}"
          - image: docker-registry.default.svc:5000/{{ openshift_namespace }}/collectd:latest
            imagePullPolicy: Always
            name: "collectd-{{ dc.name }}"
            ports:
            - containerPort: 9103
              protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          - env:
            - name: WP_ENV
              value: "{{ dc.name }}"
            - name: LINE
              value: test
            image: docker-registry.default.svc:5000/{{ openshift_namespace }}/filebeat-call-logs:latest
            imagePullPolicy: Always
            name: "filebeat-{{ dc.name }}"
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /webservices/logs
              name: "webservices-logs-{{ dc.name }}"
            - mountPath: /call_logs
              name: "call-logs-{{ dc.name }}"
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: "{{ openshift_namespace }}"
          serviceAccountName: "{{ openshift_namespace }}"
          terminationGracePeriodSeconds: 30
          volumes:
          - name: "volume-wordpress-{{ dc.name }}"
            persistentVolumeClaim:
              claimName: "wordpress-{{ dc.name }}"
          - emptyDir: {}
            name: "webservices-logs-{{ dc.name }}"
          - emptyDir: {}
            name: "call-logs-{{ dc.name }}"

      triggers:
      - type: ImageChange
        imageChangeParams: >-
          {{ _imageChangeParams
          | combine({"automatic": True} if (dc.autopush | default(None)) else {}) }}
  vars:
    _imageChangeParams:
      containerNames:
      - "httpd-{{ dc.name }}"
      from:
        kind: ImageStreamTag
        name: "{{ httpd_image_name }}:{{ openshift_registry_tag }}"
        namespace: "{{ openshift_namespace }}"
  tags: dc
