# Kubernetes configuration for the continuous integration rig

- include_vars: continuous-integration-vars.yml
  tags: always

# Inspired from
# https://eleanordare.com/blog/2017/6/15/running-cucumber-tests-in-openshift-from-a-jenkins-pipeline
- name: "Jenkins infrastructure ImageStreams and builds"
  openshift_imagestream:
    name: "{{ item.name }}"
    namespace: "{{ openshift_namespace }}"
    git: "{{ item.git }}"
    metadata:
      labels:
        app: jenkins
  with_items:
    - name: "{{ ci_jenkins_master_image_name }}"
      git: "{{ ci_jenkins_master_git_build }}"
    - name: "{{ ci_jenkins_test_sidekick_image_name }}"
      git: "{{ ci_jenkins_test_sidekick_git_build }}"
  register: _jenkins_build

- name: "Rebuild Jenkins images now"
  when: |
    (
    (_jenkins_build | default({})) is changed
    or
    ("ci.rebuild" in ansible_run_tags)
    )
  shell: "oc -n {{ openshift_namespace }} start-build --wait {{ item }}"
  delegate_to: localhost
  with_items:
    - "{{ ci_jenkins_master_image_name }}"
    - "{{ ci_jenkins_test_sidekick_image_name }}"
  tags: ci.rebuild

# This ImageStream is intended as a so-called "Kubernetes plug-in pod
# template", that the Jenkinsfile can reference (or inheritFrom, in
# our case). See details here:
# https://docs.openshift.com/container-platform/3.11/using_images/other_images/jenkins.html#configuring-the-jenkins-kubernetes-plug-in
# Note that the built-in "nodejs" templates etc. documented on that
# page, don't work (at least for us at EPFL) because they reference a
# Docker image on a nonexistent, non-standard in-cluster Docker
# registry.
- name: "is/{{ ci_jenkins_slave_image_name }} (pulled from {{ ci_jenkins_slave_docker_image }})"
  openshift_imagestream:
    name: "{{ ci_jenkins_slave_image_name }}"
    namespace: "{{ openshift_namespace }}"
    from: "{{ ci_jenkins_slave_docker_image }}"
    metadata:
      labels:
        # This causes the Jenkins OpenShift Sync plug-in to pick up
        # this ImageStream (and pass it to the Kubernetes plug-in):
        role: jenkins-slave

- name: Jenkins service
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: jenkins
      namespace: "{{ openshift_namespace }}"
      labels:
        app: jenkins
    spec:
      type: ClusterIP
      ports:
        - name: "web"
          port: 80
          targetPort: 8080
          protocol: TCP
        - name: "jnlp"
          port: 50000
          targetPort: 50000
          protocol: TCP
      selector:
        app: jenkins
        deploymentconfig: jenkins


- name: "PersistentVolumeClaim/{{ ci_jenkins_persistent_volume_claim_name }}"
  openshift:
    state: latest
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: jenkins
      name: "{{ ci_jenkins_persistent_volume_claim_name }}"
      namespace: wwp-test
    spec:
      volumeName: "{{ ci_jenkins_persistent_volume_name }}"
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi


- name: Jenkins master (DeploymentConfig)
  openshift:
    state: latest
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: jenkins
      name: jenkins
      namespace: "{{ openshift_namespace }}"
    spec:
      replicas: 1
      selector:
        app: jenkins
        deploymentconfig: jenkins
      template:
        metadata:
          labels:
            app: jenkins
            deploymentconfig: jenkins
            jenkins: master
        spec:
          containers:
            - name: jenkins
              env:
              - name: OPENSHIFT_ENABLE_OAUTH
                value: "true"
              - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
                value: "true"
              - name: DISABLE_ADMINISTRATIVE_MONITORS
                value: "false"
              - name: KUBERNETES_MASTER
                value: https://kubernetes.default:443
              - name: KUBERNETES_TRUST_CERTIFICATES
                value: "true"
              - name: JENKINS_SERVICE_NAME
                value: jenkins
              - name: JNLP_SERVICE_NAME
                value: jenkins-jnlp
              # "image" gets set thanks to triggers â†’ ImageChange, below
              imagePullPolicy: IfNotPresent
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /login
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 3
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 240
              livenessProbe:
                failureThreshold: 2
                httpGet:
                  path: /login
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 420
                periodSeconds: 360
                successThreshold: 1
                timeoutSeconds: 240
              resources:
                limits:
                  memory: 2Gi
              volumeMounts:
              - mountPath: /var/lib/jenkins/jobs
                name: jenkins-data
                subPath: jobs
              - mountPath: /var/lib/jenkins/logs
                name: jenkins-data
                subPath: logs
          securityContext: {}
          serviceAccount: jenkins
          serviceAccountName: jenkins
          volumes:
          - name: jenkins-data
            persistentVolumeClaim:
              claimName: "{{ ci_jenkins_persistent_volume_claim_name }}"
      triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - jenkins
          from:
            kind: ImageStreamTag
            name: "{{ ci_jenkins_master_image_name }}:latest"
            namespace: "{{ openshift_namespace }}"
  tags:
    - ci.services


- name: Jenkins pipeline (BuildConfig)
  openshift:
    state: latest
    apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: jenkins
      name: "{{ ci_buildconfig_name }}"
      namespace: "{{ openshift_namespace }}"
    spec:
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: '{{ lookup("template", "Jenkinsfile") }}'
  tags:
    - ci.jenkinsfile


- name: Jenkins route
  openshift:
    state: latest
    apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: jenkins
      namespace: "{{ openshift_namespace }}"
      labels:
        app: jenkins
    spec:
      host: "{{ ci_jenkins_public_hostname }}"
      port:
        targetPort: web
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: jenkins

