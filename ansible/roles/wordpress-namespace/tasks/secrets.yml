- tags: always
  include_vars: "{{ item }}"
  with_items:
  - serving-secrets-{{ inventory_deployment_stage }}.yml
  - s3-secrets-vars.yml

- name: "SMTP password"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "smtp-password"
        namespace: "{{ inventory_namespace }}"
      data:
         SERVICE_WWW_NOREPLY_SMTP_PASSWORD: "{{ smtp.password | eyaml(eyaml_keys) | b64encode }}"
  tags: msmtp

- name: EPFL plugin secrets
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: wp-plugin-secrets
        namespace: "{{ inventory_namespace }}"
      type: Opaque
      stringData:
        restauration_api_password: "{{ restauration.api_password | eyaml(eyaml_keys) }}"
        wpforms_license: "{{ wpforms.license_key | eyaml(eyaml_keys) }}"
        wpforms_license_json: "{{ _wpforms_license_struct | to_json }}"
        saferpay_test_apiusername: "{{ saferpay.test.apiusername | eyaml(eyaml_keys) }}"
        saferpay_test_apipassword: "{{ saferpay.test.apipassword | eyaml(eyaml_keys) }}"
        saferpay_test_customerid: "{{ saferpay.test.customerid | eyaml(eyaml_keys) | string }}"
        saferpay_test_terminalid: "{{ saferpay.test.terminalid | eyaml(eyaml_keys) | string }}"
        saferpay_prod_apiusername: "{{ saferpay.prod.apiusername | eyaml(eyaml_keys) }}"
        saferpay_prod_apipassword: "{{ saferpay.prod.apipassword | eyaml(eyaml_keys) }}"
        saferpay_prod_customerid: "{{ saferpay.prod.customerid | eyaml(eyaml_keys) | string }}"
        saferpay_prod_terminalid: "{{ saferpay.prod.terminalid | eyaml(eyaml_keys) | string }}"

  vars:
     _wpforms_license_struct:
        type: "elite"
        key: "{{ wpforms.license_key | eyaml(eyaml_keys) }}"
        is_expired: false
        is_disabled: false
        is_invalid: false

- name: MariaDB operator backup / restore credentials
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: s3-backup-credentials
        namespace: "{{ inventory_namespace }}"
      type: Opaque
      stringData:
        keyId: "{{ s3_backup_credentials.keyId }}"
        accessSecret: "{{ s3_backup_credentials.accessSecret }}"

- name: Check if WordPress authentication secret exists
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: wordpress-authentication
    namespace: "{{ inventory_namespace }}"
  register: existing_wp_secret

# TODO: We need to generate our own secrets instead of relying on api.wordpress.org
- name: Generate WordPress authentication secrets
  ansible.builtin.uri:
    url: "https://api.wordpress.org/secret-key/1.1/salt/"
    return_content: yes
  register: wordpress_secret_response
  when: existing_wp_secret.resources | length == 0

- name: Create WordPress authentication secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: wordpress-authentication
        namespace: "{{ inventory_namespace }}"
      type: Opaque
      stringData:
        "wp-nonces.php": |
          <?php
          {{ wordpress_secret_response.content }}
  when: existing_wp_secret.resources | length == 0

- name: Create Search Inside Secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: search-inside-secret
        namespace: "{{ inventory_namespace }}"
      data:
        wp_api_token: "{{ _search_inside_wp_api_hashed_token | b64encode }}"
  vars:
    _search_inside_wp_api_credentials: >-
      {{ search_inside_scrape.username
      }}:{{
      search_inside_scrape.password
      | eyaml(eyaml_keys) }}
    _search_inside_wp_api_hashed_token: "{{ _search_inside_wp_api_credentials | password_hash_bcrypt(_iv) }}"
    _iv: "Lnkai92hu9u8nNJUkhua82hGFafghjkhi"
