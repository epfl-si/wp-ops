- tags: always
  include_vars: "{{ item }}"
  with_items:
  - serving-secrets-{{ inventory_deployment_stage }}.yml
  - secrets-vars.yml

- name: "SMTP password"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "smtp-password"
        namespace: "{{ inventory_namespace }}"
      data:
         SERVICE_WWP_NOREPLY_PASSWORD: "{{ smtp.password | eyaml(eyaml_keys) | b64encode }}"
  tags: httpd.secrets

- name: Scality restore secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: restore-credentials
        namespace: "{{ inventory_namespace }}"
      type: Opaque
      stringData:
        aws-cli-credentials.ini: >-
          {{ lookup("pipe", "keybase fs read " + keybase_restore_secret_path) }}

- name: EPFL plugin secrets
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: wp-plugin-secrets
        namespace: "{{ inventory_namespace }}"
      type: Opaque
      stringData:
        restauration_api_password: "{{ restauration.api_password | eyaml(eyaml_keys) }}"
        wpforms_license: "{{ wpforms.license_key | eyaml(eyaml_keys) }}"
        saferpay_test_apiusername: "{{ saferpay.test.apiusername | eyaml(eyaml_keys) }}"
        saferpay_test_apipassword: "{{ saferpay.test.apipassword | eyaml(eyaml_keys) }}"
        saferpay_test_customerid: "{{ saferpay.test.customerid | eyaml(eyaml_keys) | string }}"
        saferpay_test_terminalid: "{{ saferpay.test.terminalid | eyaml(eyaml_keys) | string }}"
        saferpay_prod_apiusername: "{{ saferpay.prod.apiusername | eyaml(eyaml_keys) }}"
        saferpay_prod_customerid: "{{ saferpay.prod.customerid | eyaml(eyaml_keys) | string }}"
        saferpay_prod_terminalid: "{{ saferpay.prod.terminalid | eyaml(eyaml_keys) | string }}"

- tags: always
  include_vars: "backup-secrets-{{ inventory_deployment_stage }}.yml"

- name: MariaDB operator restore secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: s3-backup-credentials
        namespace: "{{ inventory_namespace }}"
      type: Opaque
      stringData:
        keyId: "{{ _keyId }}"
        accessSecret: "{{ _accessSecret }}"
  vars:
    _keyId: >-
        {{ mariadb_operator_s3_backups.keyId | eyaml(eyaml_keys) }}
    _accessSecret: >-
        {{ mariadb_operator_s3_backups.accessSecret | eyaml(eyaml_keys) }}

- name: Check if WordPress authentication secret exists
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: wordpress-authentication
    namespace: "{{ inventory_namespace }}"
  register: existing_wp_secret

# TODO: We need to generate our own secrets instead of relying on api.wordpress.org
- name: Generate WordPress authentication secrets
  ansible.builtin.uri:
    url: "https://api.wordpress.org/secret-key/1.1/salt/"
    return_content: yes
  register: wordpress_secret_response
  when: existing_wp_secret.resources | length == 0

- name: Create WordPress authentication secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: wordpress-authentication
        namespace: "{{ inventory_namespace }}"
      type: Opaque
      stringData:
        "wp-nonces.php": |
          <?php
          {{ wordpress_secret_response.content }}
  when: existing_wp_secret.resources | length == 0
