# This template renders to the “spec” sub-structure of a
# WordPress nginx deployment.
#
# Caller should set the following vars:
#
#    - app_label     The value for the `app=` label that all pods will
#                    bear, as a string
#    - additional_pod_labels
#                    A dict of keys and values to attach to the pod template
#    - image_tag
#                    The part of the image name after the colon, that the
#                    serving containers will use
#    - image_pull_policy
#                    One of "Always" (the default) or "IfNotPresent"

{% set _request_cpu_de_minimis = "20m" %}
{% set _request_ram_de_minimis = "256Mi" %}

{% if inventory_deployment_stage == "production" %}
{%   set _request_cpu_serving = "1" %}
{%   set _request_cpu_monitoring = "100m" %}
{%   set _request_ram = "1Gi" %}
{% else %}
{%   set _request_cpu_serving = "10m" %}
{%   set _request_cpu_monitoring = _request_cpu_de_minimis %}
{%   set _request_ram = _request_ram_de_minimis %}
{% endif %}

spec:
    replicas: >-
      {{ 2 if inventory_deployment_stage == "production"
      else 1 }}
    selector:
      matchLabels:
        app: "{{ app_label }}"
    strategy:
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: "{{ app_label }}"
{% if additional_pod_labels is defined %}
{%   for k,v in additional_pod_labels.items() %}
          {{ k }}: {{ v }}
{%   endfor %}
{% endif %}
      spec:
{% if not inventory_has_only_one_worker_node | default(False) %}
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchLabels:
                    app: "{{ app_label }}"
                topologyKey: kubernetes.io/hostname
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app: "{{ app_label }}"
                  topologyKey: topology.kubernetes.io/zone
{% endif %}
        serviceAccountName: wp-nginx
        automountServiceAccountToken: false
        containers:
          - name: nginx
            image: quay-its.epfl.ch/svc0041/wp-nginx:{{ image_tag }}
            imagePullPolicy: {{ image_pull_policy | default("Always") }}
            command:
              - /nginx-ingress-controller
              - --disable-leader-election
              - --controller-class=epfl.ch/ingress-wordpress
              - --watch-namespace=$(POD_NAMESPACE)
              - --configmap=$(POD_NAMESPACE)/wp-nginx
              - --watch-ingress-without-class=false
              - --http-port=8000
              - --https-port=8443
            resources:
{% if inventory_deployment_stage == "production" %}
              limits:
                memory: {{ _request_ram }}
{% endif %}
              requests:
                cpu: '{{ _request_cpu_serving }}'
                memory: '{{ _request_ram }}'
            ports:
              - containerPort: 8000
                protocol: TCP
              - name: nginx-metrics
                containerPort: 9145
                protocol: TCP
            volumeMounts:
              - name: wordpress-data
                mountPath: /wp-data/
                readOnly: true
              - name: fpm-socket
                mountPath: /run/php-fpm
              - name: kube-api-access
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                readOnly: true
              # Uncomment the next three lines to embug the nginx configuration
              # (see also similar comments elsewhere in the file):
              # - name: wp-nginx
              #   mountPath: /etc/nginx/template
              #   readOnly: true
            env:
              - name: POD_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.name
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
              - name: MENU_API_HOST
                value: "menu-api"
          - name: php
            image: quay-its.epfl.ch/svc0041/wp-php:{{ image_tag }}
            resources:
{% if inventory_deployment_stage == "production" %}
              limits:
                memory: {{ _request_ram }}
{% endif %}
              requests:
                cpu: '{{ _request_cpu_serving }}'
                memory: '{{ _request_ram }}'
            volumeMounts:
              - name: wordpress-data
                mountPath: /wp-data/
              - name: fpm-socket
                mountPath: /run/php-fpm
              - name: wordpress-authentication
                mountPath: /wp-nonces
                readOnly: true
              - name: smtp-password
                mountPath: /secrets/
                readOnly: true
            env:
              - name: SEARCH_INSIDE_WP_API_HASHED_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: search-inside-secret
                    key: wp_api_token
          - name: php-fpm-exporter
            image: quay-its.epfl.ch/svc0041/php-fpm_exporter:2
            resources:
              requests:
                cpu: '{{ _request_cpu_monitoring }}'
                memory: '{{ _request_ram_de_minimis }}'
              # This fits under the default (LimitRange-imposed) limits
              # even for production; so we don't need `limits:` here.
            ports:
              - name: php-fpm-metrics
                containerPort: 9253
                protocol: TCP
            livenessProbe:
              httpGet:
                scheme: HTTP
                path: /metrics
                port: 9253
              initialDelaySeconds: 5
              timeoutSeconds: 3
            args:
              - --phpfpm.fix-process-count
              - --log.level
              - debug
        imagePullSecrets:
          - name: "{{ quay_puller_secret_name }}"
        restartPolicy: Always
        volumes:
          - name: fpm-socket
            emptyDir: {}
          - name: wordpress-data
            persistentVolumeClaim:
              claimName: wordpress-data
          # Uncomment the next three lines to embug the nginx configuration
          # (see also similar comments elsewhere in the file):
          # - name: wp-nginx
          #   configMap:
          #     name: wp-nginx
          - name: kube-api-access
            projected:
              defaultMode: 420
              sources:
              - serviceAccountToken:
                  expirationSeconds: 3600
                  path: token
              - configMap:
                  items:
                  - key: ca.crt
                    path: ca.crt
                  name: kube-root-ca.crt
              - downwardAPI:
                  items:
                  - fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                    path: namespace
          - name: wordpress-authentication
            secret:
              secretName: wordpress-authentication
          - name: smtp-password
            secret:
              secretName: smtp-password
