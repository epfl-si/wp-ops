- tags: always
  include_vars: "{{ item }}"
  with_items:
    - s3-vars.yml
    - tekton-vars.yml

- name: wp-base/Tekton - Required asks for building
  kubernetes.core.k8s:
    namespace:  "{{ inventory_namespace }}"
    src: "{{ item }}"
  with_items:
    - https://api.hub.tekton.dev/v1/resource/tekton/task/git-clone/0.9/raw
    - https://github.com/openshift-pipelines/tektoncd-catalog/raw/p/tasks/task-buildah/0.6.0/task-buildah.yaml

- name: wp-base/Tekton - Pipeline
  kubernetes.core.k8s:
    definition:
      apiVersion: tekton.dev/v1
      kind: Pipeline
      metadata:
        name: "{{ pipeline_name }}"
        namespace: "{{ inventory_namespace }}"
      spec:
        params:
          - name: next-build-id
            description: "Sequence number of the next build to push to Quay"
          - name: target-deployment
            description: "Name of the Deployment to update"
        workspaces:
          - name: shared-workspace
          - name: dockerconfig
        tasks:
          - name: prep
            taskSpec:
              steps:
              - name: sed
                image: public.ecr.aws/bitnami/git:latest
                script: |
                    set -e -x
                    rm -rf /workspace/source/wp-ops
                    git clone https://github.com/epfl-si/wp-ops /workspace/source/wp-ops
                    sed -i 's;FROM wp-base;FROM {{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$(params.next-build-id);g' \
                      /workspace/source/wp-ops/docker/*/Dockerfile
                    sed -i 's;--from=wp-base;--from={{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$(params.next-build-id);g' \
                      /workspace/source/wp-ops/docker/*/Dockerfile
                    sed -i 's;FROM bitnami/nginx-ingress-controller:1.12.1;FROM {{ ansible_quay_hostname }}/{{ quay_organization }}/bitnami-nginx-ingress-controller:1.12.1;g' \
                      /workspace/source/wp-ops/docker/*/Dockerfile
                    sed -i 's;FROM ubuntu:jammy;FROM {{ ansible_quay_hostname }}/{{ quay_organization }}/ubuntu:jammy;g' \
                      /workspace/source/wp-ops/docker/*/Dockerfile
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-base
            runAfter: [prep]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$(params.next-build-id)"
              - name: CONTEXT
                value: "wp-ops/docker/wp-base"
              - name: VERBOSE
                value: "true"
              - name: BUILD_EXTRA_ARGS
                value: >-
                  --build-arg
                  AWS_ACCESS_KEY_ID={{ s3_build_credentials.AWS_ACCESS_KEY_ID }}
                  --build-arg
                  AWS_SECRET_ACCESS_KEY={{ s3_build_credentials.AWS_SECRET_ACCESS_KEY }}
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-nginx
            runAfter: [ build-wp-base ]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-nginx:$(params.next-build-id)"
              - name: CONTEXT
                value: "wp-ops/docker/wordpress-nginx"
              - name: VERBOSE
                value: "true"
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-php
            runAfter: [ build-wp-base ]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-php:$(params.next-build-id)"
              - name: CONTEXT
                value: "wp-ops/docker/wordpress-php"
              - name: VERBOSE
                value: "true"
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: patch-deployment
            runAfter: [ build-wp-nginx, build-wp-php ]
            taskSpec:
              steps:
                - name: rollout
                  image: public.ecr.aws/bitnami/kubectl:latest
                  script: |
                    case "$(params.next-build-id)" in 
                      *[0-9]*)
                        kubectl patch deployment $(params.target-deployment) --patch='{"spec":{"template":{"spec":{
                            "containers":[
                              {
                                "name": "nginx",
                                "image": "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-nginx:$(params.next-build-id)"
                              },
                              {
                                "name": "php",
                                "image": "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-php:$(params.next-build-id)"
                              }
                            ]
                        }}}}' ;;
                      *)
                        kubectl rollout restart deployment $(params.target-deployment) ;;
                    esac

- name: wp-base/Tekton - CronJob
  kubernetes.core.k8s:
    definition:
      apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: "{{ run_pipeline_wp_base_build }}"
        namespace: "{{ inventory_namespace }}"
        labels:
          app.kubernetes.io/component: 'cronjob'
          app.kubernetes.io/name: "{{ pipeline_name }}"
      spec:
        timeZone: "Europe/Zurich"
        schedule: "*/10 * * * *"
        concurrencyPolicy: Forbid
        jobTemplate:
          spec:
            backoffLimit: 0
            template:
              spec:
                serviceAccountName: "{{ wp_base_builder_service_account }}"
                restartPolicy: Never
                containers:
                  - name: trigger-oc-pipelinerun
                    image: "{{ oc_cli_image }}"
                    command:
                      - /bin/sh
                      - -c
                      - |
                        oc apply -f - <<EOF
                        ---
                        apiVersion: v1
                        kind: PersistentVolumeClaim
                        metadata:
                          name: tekton-scratch # TODO we need to change PVC for each build
                          namespace: "{{ inventory_namespace }}"
                        spec:
                          accessModes:
                            - ReadWriteOnce
                          storageClassName: wordpress-nfs-build
                          resources:
                            requests:
                              storage: 50Mi
                        ---
                        apiVersion: tekton.dev/v1beta1
                        kind: PipelineRun
                        metadata:
                          name: "{{ run_pipeline_wp_base_build }}-$(date -u +%Y%m%d-%H%Mz)"
                          namespace: "{{ inventory_namespace }}"
                        spec:
                          timeout: "2h"
                          serviceAccountName: "{{ wp_base_builder_buildah_service_account }}"
                          pipelineRef:
                            name: "{{ pipeline_name }}"
                          params:
                            - name: next-build-id
                              value: 2025-136-auto
                            - name: target-deployment
                              value: wp-nginx
                          workspaces:
                            - name: shared-workspace
                              persistentVolumeClaim:
                                claimName: tekton-scratch # TODO we need to change PVC for each build
                            - name: dockerconfig
                              secret:
                                secretName: tekton-push
                        EOF
