- tags: always
  include_vars: "{{ item }}"
  with_items:
    - ../../../vars/quay-vars.yml
    - mirrors-vars.yml
    - s3-vars.yml
    - build-vars.yml
    - tekton-vars.yml

- tags: always
  include_vars:
    name: runner_credentials
    file: ../../vars/runner-credentials.yml

- name: wp-base/Tekton - Off-the-shelf tasks
  kubernetes.core.k8s:
    namespace:  "{{ inventory_namespace }}"
    src: "{{ item }}"
  with_items:
    - https://api.hub.tekton.dev/v1/resource/tekton/task/git-clone/0.9/raw
    - https://github.com/openshift-pipelines/tektoncd-catalog/raw/p/tasks/task-buildah/0.6.0/task-buildah.yaml

- name: "`Task/oci-retag`"
  kubernetes.core.k8s:
    definition:
      apiVersion: tekton.dev/v1
      kind: Task
      metadata:
        name: oci-retag
        namespace:  "{{ inventory_namespace }}"
      spec:
        description: |-
          Tekton task to “re-tag” an image through the OCI Distribution API
          (a.k.a. “docker push“, except there needs be no code from Docker,
          inc. in use anywhere.)
        params:
        - name: tagFrom
          description: The OCI tag or sha256 ref to copy from.
          type: string
          default: ""
        - name: tagTo
          description: The OCI tag to set.
          type: string
          default: ""
        workspaces:
        - name: dockerconfig
          optional: false
          description: A workspace to provide a .docker/config.json
            file that grants access the container registry or registries.
            The file should be placed at the root of the workspace with name
            config.json or .dockerconfigjson.
        steps:
        - name: image-retag
          env:
          - name: TAG_FROM
            value: $(params.tagFrom)
          - name: TAG_TO
            value: $(params.tagTo)
          - name: WORKSPACES_DOCKERCONFIG_PATH
            value: $(workspaces.dockerconfig.path)
          image: "{{ build_toolbox_image }}"
          imagePullPolicy: Always
          script: |
            #!/bin/bash
            set -e -x

            mkdir /tmp/docker-auth
            cp "$WORKSPACES_DOCKERCONFIG_PATH"/.docker*json /tmp/docker-auth/config.json
            DOCKER_CONFIG=/tmp/docker-auth \
              skopeo copy "docker://$TAG_FROM" "docker://$TAG_TO"

- name: wp-base/Tekton - Pipeline
  kubernetes.core.k8s:
    definition:
      apiVersion: tekton.dev/v1
      kind: Pipeline
      metadata:
        name: "{{ pipeline_name }}"
        namespace: "{{ inventory_namespace }}"
      spec:
        params:
          - name: explicit-stem
            default: ''
            description: "Sequence number of the next build to push to Quay"
          - name: target-deployment
            description: "Name of the Deployment to update"
          - name: branch-name
            default: ''
            description: "Branch name to use in the clone command"
          - name: commit-sha
            type: array
            default: []
            description: "Commit SHAs of the built image"
          - name: wordpress-version
            default: ''
            description: "Wordpress image used to build wp-base image"
        workspaces:
          - name: shared-workspace
          - name: dockerconfig
        tasks:
          - name: prep
            taskSpec:
              results:
                - name: build-tag
                  description: "The generated tag"
                - name: retag-image-php
                  description: "The target name of the wp-php image to re-tag"
                - name: retag-image-nginx
                  description: "The target name of the wp-nginx image to re-tag"
              steps:
              - name: sed
                image: "{{ build_toolbox_image }}"
                imagePullPolicy: Always
                env:
                  - name: QUAY_API_BEARER_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: tekton-quay-credentials
                        key: QUAY_API_BEARER_TOKEN
                script: |
                    set -e -x
                    cd /workspace/source/

                    if [ -n "$(params.explicit-stem)" ]; then
                      STEM="$(params.explicit-stem)"
                    else
                      STEM="$(date +%Y)"
                    fi
                    case "$STEM" in
                      nightly*) TAG="$STEM" ;;
                      *)        last="$(curl --silent -H "Authorization: bearer $QUAY_API_BEARER_TOKEN" https://quay-its.epfl.ch/api/v1/repository/svc0041/wp-nginx \
                                        | jq -r '.tags
                                                 | to_entries
                                                 | map(select(.key | test("^'$STEM'-[0-9]+$")))
                                                 | sort_by(.key)
                                                 | last
                                                 | if . == null then "'$STEM'-000" else .key end')"
                                 num="$(echo "$last" | sed -n 's/.*-0*\([1-9][0-9]*\)$/\1/p')"
                                 TAG="$(printf "%s-%03d" "$STEM" $((num + 1)))" ;;
                    esac
                    echo -n "$TAG" > $(results.build-tag.path)

                    deploy="deployment/$(params.target-deployment)"
                    if [ -n "$(kubectl get "$deploy" -o jsonpath="{ .metadata.annotations['self-service-fruit'] }")" ]; then
                      kubectl get "$deploy" -o jsonpath='{ range .spec.template.spec.containers[*]} {.image }{ "\n" }{ end }' | \
                        while read img; do case "$img" in
                           *wp-nginx*) echo -n "$img" > $(results.retag-image-nginx.path) ;;
                           *wp-php*) echo -n "$img" > $(results.retag-image-php.path) ;;
                        esac; done
                    fi

                    git clone https://github.com/epfl-si/wp-ops wp-ops
                    (cd wp-ops; git checkout feature/wp-base-cloud-tekton-build )     # TODO: remove upon merging that branch
                    if [ -z "$(params.branch-name)" ]; then
                      (cd wp-ops; git checkout "$(params.branch-name)" || true)
                    fi

                    git clone https://github.com/epfl-si/wp-operator.git
                    if [ -z "$(params.branch-name)" ]; then
                      (cd wp-operator; git checkout "$(params.branch-name)" || true)
                    fi

                    dockerfiles="$(find . -name Dockerfile)"
                    sed -i "s;FROM quay-its.epfl.ch/svc0041/wp-base:rc;FROM {{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$TAG;g" \
                      $dockerfiles
                    sed -i "s;--from=quay-its.epfl.ch/svc0041/wp-base:rc;--from={{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$TAG;g" \
                      $dockerfiles
                    sed -i 's;FROM bitnami/nginx-ingress-controller:1.12.1;FROM {{ ansible_quay_hostname }}/{{ quay_organization }}/bitnami-nginx-ingress-controller:1.12.1;g' \
                      $dockerfiles
                    sed -i 's;FROM ubuntu:jammy;FROM {{ ansible_quay_hostname }}/{{ quay_organization }}/ubuntu:jammy;g' \
                      $dockerfiles
                    if [ -n "$(params.branch-name)" ]; then
                      echo "try_git_switch '$(params.branch-name)'" >> wp-ops/docker/wp-base/install-wordpress.sh
                    fi
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-base
            runAfter: [prep]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$(tasks.prep.results.build-tag)"
              - name: CONTEXT
                value: "wp-ops/docker/wp-base"
              - name: VERBOSE
                value: "true"
              - name: BUILD_EXTRA_ARGS
                value: >-
                  --build-arg
                  AWS_ACCESS_KEY_ID={{ s3_build_credentials.AWS_ACCESS_KEY_ID }}
                  --build-arg
                  AWS_SECRET_ACCESS_KEY={{ s3_build_credentials.AWS_SECRET_ACCESS_KEY }}
                  --build-arg
                  WORDPRESS_VERSION='$(params.wordpress-version)'
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: tag-wp-base-rc
            runAfter: [ build-wp-base ]
            when:
              - input: "$(params.explicit-stem)"
                operator: in
                values: [""]
            taskRef:
              kind: Task
              name: oci-retag
            params:
              - name: tagFrom
                value: >-
                  {{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base@$(tasks.build-wp-base.results.IMAGE_DIGEST)
              - name: tagTo
                value: >-
                  {{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:rc
            workspaces:
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-nginx
            runAfter: [ build-wp-base ]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-nginx:$(tasks.prep.results.build-tag)"
              - name: CONTEXT
                value: "wp-ops/docker/wordpress-nginx"
              - name: VERBOSE
                value: "true"
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-php
            runAfter: [ build-wp-base ]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-php:$(tasks.prep.results.build-tag)"
              - name: CONTEXT
                value: "wp-ops/docker/wordpress-php"
              - name: VERBOSE
                value: "true"
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-cron
            runAfter: [ build-wp-base ]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-cron:$(tasks.prep.results.build-tag)"
              - name: CONTEXT
                value: "wp-ops/docker/wp-cron"
              - name: VERBOSE
                value: "true"
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-operator
            runAfter: [ build-wp-base ]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-operator:$(tasks.prep.results.build-tag)"
              - name: CONTEXT
                value: "wp-operator"
              - name: VERBOSE
                value: "true"
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: retag-wp-nginx
            runAfter: [ build-wp-nginx ]
            when:
              - input: "$(tasks.prep.results.retag-image-nginx)"
                operator: notin
                values: [""]
            taskRef:
              kind: Task
              name: oci-retag
            params:
              - name: tagFrom
                value: >-
                  {{ ansible_quay_hostname }}/{{ quay_organization }}/wp-nginx@$(tasks.build-wp-nginx.results.IMAGE_DIGEST)
              - name: tagTo
                value: >-
                  {{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$(tasks.prep.results.retag-image-nginx)
            workspaces:
              - name: dockerconfig
                workspace: dockerconfig
          - name: retag-wp-php
            runAfter: [ build-wp-php ]
            when:
              - input: "$(tasks.prep.results.retag-image-php)"
                operator: notin
                values: [""]
            taskRef:
              kind: Task
              name: oci-retag
            params:
              - name: tagFrom
                value: >-
                  {{ ansible_quay_hostname }}/{{ quay_organization }}/wp-php@$(tasks.build-wp-php.results.IMAGE_DIGEST)
              - name: tagTo
                value: >-
                  {{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$(tasks.prep.results.retag-image-php)
            workspaces:
              - name: dockerconfig
                workspace: dockerconfig
          - name: patch-and-rollout-deployment
            runAfter: [ retag-wp-nginx, retag-wp-php ]
            taskSpec:
              steps:
                - name: patch-and-rollout
                  image: "{{ build_toolbox_image }}"
                  imagePullPolicy: Always
                  script: |
                    kubectl patch deployment $(params.target-deployment) --patch='{
                      "spec":
                      {
                        "template":
                        {
                          "metadata":
                          {
                            "annotations":
                            {
                              "epfl/built-from-branch": "$(params.branch-name)"
                            }
                          }
                        }
                      }
                    }' && kubectl rollout restart deploy/$(params.target-deployment)

- name: "Credentials that let {{ wp_base_builder_buildah_service_account }} pull the build-toolbox"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: "{{ wp_base_builder_buildah_service_account }}"
        namespace: "{{ inventory_namespace }}"
      imagePullSecrets:
      - name: "{{ quay_puller_secret_name }}"

- name: wp-base/Tekton - CronJob for periodic builds
  with_items:
    - suffix: rc
      schedule: "0 1 * * *"
      params:
      - name: target-deployment
        value: wp-nginx-rc
    - suffix: alpha
      schedule: "0 1 * * *"
      params:
      - name: explicit-stem
        value: 'nightly-$(date -u +%Y%m%d)'
      - name: target-deployment
        value: wp-nginx-alpha
      - name: wordpress-version
        value: latest
  kubernetes.core.k8s:
    definition:
      apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: "{{ pipeline_name }}-{{ item.suffix }}"
        namespace: "{{ inventory_namespace }}"
        labels:
          app.kubernetes.io/component: 'cronjob'
          app.kubernetes.io/name: "{{ pipeline_name }}-{{ item.suffix }}"
      spec:
        timeZone: "Europe/Zurich"
        schedule: "{{ item.schedule }}"
        concurrencyPolicy: Forbid
        jobTemplate:
          spec:
            backoffLimit: 0
            template:
              spec:
                serviceAccountName: "{{ wp_base_builder_service_account }}"
                restartPolicy: Never
                containers:
                  - name: "trigger-oc-pipelinerun-{{ item.suffix }}"
                    image: "{{ build_toolbox_image }}"
                    imagePullPolicy: Always
                    command:
                      - /bin/sh
                      - -c
                      - |
                        set -e -x
                        pvc_uid="$(pwgen 5 1 | tr 'A-Z' 'a-z')"
                        tekton_pvc_name="tekton-scratch-${pvc_uid}-{{ item.suffix }}"
                        oc apply -f - <<EOF
                        ---
                        apiVersion: v1
                        kind: PersistentVolumeClaim
                        metadata:
                          name: $tekton_pvc_name
                          namespace: "{{ inventory_namespace }}"
                        spec:
                          accessModes:
                            - ReadWriteOnce
                          storageClassName: wordpress-nfs-build
                          resources:
                            requests:
                              storage: 50Mi
                        ---
                        apiVersion: tekton.dev/v1
                        kind: PipelineRun
                        metadata:
                          name: "{{ pipeline_name }}-{{ item.suffix }}-$(date -u +%Y%m%d-%H%Mz)"
                          namespace: "{{ inventory_namespace }}"
                        spec:
                          timeouts:
                            pipeline: "1h"
                          taskRunTemplate:
                            serviceAccountName: "{{ wp_base_builder_buildah_service_account }}"
                          taskRunSpecs:
                            - pipelineTaskName: prep
                              serviceAccountName: "{{ wp_base_builder_service_account }}"
                          pipelineRef:
                            name: "{{ pipeline_name }}"
                          params:
                            {{ item.params | to_nice_yaml | indent(4) }}
                          workspaces:
                            - name: shared-workspace
                              persistentVolumeClaim:
                                claimName: $tekton_pvc_name
                            - name: dockerconfig
                              secret:
                                secretName: tekton-push
                        EOF
