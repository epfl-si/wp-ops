- tags: always
  include_vars: "{{ item }}"
  with_items:
    - s3-vars.yml
    - tekton-vars.yml

- name: wp-base/Tekton - Required tasks for building
  kubernetes.core.k8s:
    namespace:  "{{ inventory_namespace }}"
    src: "{{ item }}"
  with_items:
    - https://api.hub.tekton.dev/v1/resource/tekton/task/git-clone/0.9/raw
    - https://github.com/openshift-pipelines/tektoncd-catalog/raw/p/tasks/task-buildah/0.6.0/task-buildah.yaml

- name: wp-base/Tekton - Pipeline
  kubernetes.core.k8s:
    definition:
      apiVersion: tekton.dev/v1
      kind: Pipeline
      metadata:
        name: "{{ pipeline_name }}"
        namespace: "{{ inventory_namespace }}"
      spec:
        params:
          - name: explicit-stem
            default: ''
            description: "Sequence number of the next build to push to Quay"
          - name: target-deployment
            description: "Name of the Deployment to update"
          - name: repos
            type: array
            default: []
            description: "List af all repositories to clone on a branch"
          - name: branch-name
            default: ''
            description: "Branch name to use in the clone command"
          - name: commit-sha
            type: array
            default: []
            description: "Commit SHAs of the built image"
          - name: wordpress-version
            default: ''
            description: "Wordpress image used to build wp-base image"
        workspaces:
          - name: shared-workspace
          - name: dockerconfig
        tasks:
          - name: prep
            taskSpec:
              results:
                - name: build-tag
                  description: "The generated tag"
              steps:
              - name: sed
                image: public.ecr.aws/bitnami/git:latest
                args: [
                  "$(params.repos[*])",
                ]
                env:
                  - name: QUAY_API_BEARER_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: tekton-quay-credentials
                        key: QUAY_API_BEARER_TOKEN
                script: |
                    set -e -x
                    if [ -n "$(params.explicit-stem)" ]; then 
                      STEM="$(params.explicit-stem)"
                    else
                      STEM="$(date +%Y)"
                    fi
                    case "$STEM" in
                      nightly*) TAG="$STEM" ;;
                      *)        last="$(curl -H "Authorization: bearer $QUAY_API_BEARER_TOKEN" https://quay-its.epfl.ch/api/v1/repository/svc0041/wp-nginx | jq '.tags
                                    | to_entries
                                    | map(select(.key | test("^'$STEM'-[0-9]+$")))
                                    | sort_by(.key)
                                    | last
                                    | if . == null then "'$STEM'-001" else .key end')"
                                  num="$(echo "$last" | sed -n 's/.*-\([0-9][0-9]*\)$/\1/p')"
                                  TAG="$(printf "%s-%d" "$STEM" $((num + 1)))" ;;
                    esac
                    echo -n "$TAG" > $(results.build-tag.path)
                    git clone -b feature/wp-base-cloud-tekton-build https://github.com/epfl-si/wp-ops /workspace/source/wp-ops
                    sed -i 's;FROM wp-base;FROM {{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$TAG;g' \
                      /workspace/source/wp-ops/docker/*/Dockerfile
                    sed -i 's;--from=wp-base;--from={{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$TAG;g' \
                      /workspace/source/wp-ops/docker/*/Dockerfile
                    sed -i 's;FROM bitnami/nginx-ingress-controller:1.12.1;FROM {{ ansible_quay_hostname }}/{{ quay_organization }}/bitnami-nginx-ingress-controller:1.12.1;g' \
                      /workspace/source/wp-ops/docker/*/Dockerfile
                    sed -i 's;FROM ubuntu:jammy;FROM {{ ansible_quay_hostname }}/{{ quay_organization }}/ubuntu:jammy;g' \
                      /workspace/source/wp-ops/docker/*/Dockerfile
                    for repo in "$@"; do
                      echo "switch_repo_branch '$repo' '$(params.branch-name)'" >> /workspace/source/wp-ops/docker/wp-base/install-wordpress.sh
                    done
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-base
            runAfter: [prep]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-base:$(tasks.prep.results.build-tag)"
              - name: CONTEXT
                value: "wp-ops/docker/wp-base"
              - name: VERBOSE
                value: "true"
              - name: BUILD_EXTRA_ARGS
                value: >-
                  --build-arg
                  AWS_ACCESS_KEY_ID={{ s3_build_credentials.AWS_ACCESS_KEY_ID }}
                  --build-arg
                  AWS_SECRET_ACCESS_KEY={{ s3_build_credentials.AWS_SECRET_ACCESS_KEY }}
                  --build-arg
                  WORDPRESS_VERSION='$(params.wordpress-version)'
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-nginx
            runAfter: [ build-wp-base ]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-nginx:$(tasks.prep.results.build-tag)"
              - name: CONTEXT
                value: "wp-ops/docker/wordpress-nginx"
              - name: VERBOSE
                value: "true"
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: build-wp-php
            runAfter: [ build-wp-base ]
            taskRef:
              kind: Task
              name: buildah
            params:
              - name: IMAGE
                value: "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-php:$(tasks.prep.results.build-tag)"
              - name: CONTEXT
                value: "wp-ops/docker/wordpress-php"
              - name: VERBOSE
                value: "true"
            workspaces:
              - name: source
                workspace: shared-workspace
              - name: dockerconfig
                workspace: dockerconfig
          - name: patch-deployment
            runAfter: [ build-wp-nginx, build-wp-php ]
            taskSpec:
              steps:
                - name: rollout
                  image: public.ecr.aws/bitnami/kubectl:latest
                  script: |
                    kubectl patch deployment $(params.target-deployment) --patch='{
                      "spec":
                      {
                        "template":
                        {
                          "metadata":
                          {
                            "labels":
                            {
                              "epfl":
                              {
                                "built-from-repo": $(params.repos),
                                "built-from-branch": $(params.branch-name)
                              }
                            }
                          },
                          "spec":
                          {
                            "containers":
                            [
                              {
                                "name": "nginx",
                                "image": "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-nginx:$(params._TAG)"
                              },
                              {
                                "name": "php",
                                "image": "{{ ansible_quay_hostname }}/{{ quay_organization }}/wp-php:$(params._TAG)"
                              }
                            ]
                          }
                        }
                      }
                    }'
            params:
              - name: _TAG
                value: $(tasks.prep.results.build-tag)

- name: wp-base/Tekton - CronJob for Release Candidate
  kubernetes.core.k8s:
    definition:
      apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: "{{ run_pipeline_wp_base_build }}-rc"
        namespace: "{{ inventory_namespace }}"
        labels:
          app.kubernetes.io/component: 'cronjob'
          app.kubernetes.io/name: "{{ pipeline_name }}-rc"
      spec:
        timeZone: "Europe/Zurich"
        schedule: "30 * * * *"
        concurrencyPolicy: Forbid
        jobTemplate:
          spec:
            backoffLimit: 0
            template:
              spec:
                serviceAccountName: "{{ wp_base_builder_service_account }}"
                restartPolicy: Never
                containers:
                  - name: trigger-oc-pipelinerun-rc
                    image: "{{ oc_cli_image }}"
                    command:
                      - /bin/sh
                      - -c
                      - |
                        oc apply -f - <<EOF
                        ---
                        apiVersion: v1
                        kind: PersistentVolumeClaim
                        metadata:
                          name: tekton-scratch-$(pwgen 5 1)-rc
                          namespace: "{{ inventory_namespace }}"
                        spec:
                          accessModes:
                            - ReadWriteOnce
                          storageClassName: wordpress-nfs-build
                          resources:
                            requests:
                              storage: 50Mi
                        ---
                        apiVersion: tekton.dev/v1beta1
                        kind: PipelineRun
                        metadata:
                          name: "{{ run_pipeline_wp_base_build }}-rc-$(date -u +%Y%m%d-%H%Mz)"
                          namespace: "{{ inventory_namespace }}"
                        spec:
                          timeout: "1h"
                          serviceAccountName: "{{ wp_base_builder_buildah_service_account }}"
                          pipelineRef:
                            name: "{{ pipeline_name }}"
                          params:
                            - name: target-deployment
                              value: wp-nginx-rc
                          workspaces:
                            - name: shared-workspace
                              persistentVolumeClaim:
                                claimName: tekton-scratch-rc
                            - name: dockerconfig
                              secret:
                                secretName: tekton-push
                        EOF

- name: wp-base/Tekton - CronJob for Alpha
  kubernetes.core.k8s:
    definition:
      apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: "{{ run_pipeline_wp_base_build }}-alpha"
        namespace: "{{ inventory_namespace }}"
        labels:
          app.kubernetes.io/component: 'cronjob'
          app.kubernetes.io/name: "{{ pipeline_name }}-alpha"
      spec:
        timeZone: "Europe/Zurich"
        schedule: "0 * * * *"
        concurrencyPolicy: Forbid
        jobTemplate:
          spec:
            backoffLimit: 0
            template:
              spec:
                serviceAccountName: "{{ wp_base_builder_service_account }}"
                restartPolicy: Never
                containers:
                  - name: trigger-oc-pipelinerun-alpha
                    image: "{{ oc_cli_image }}"
                    command:
                      - /bin/sh
                      - -c
                      - |
                        oc apply -f - <<EOF
                        ---
                        apiVersion: v1
                        kind: PersistentVolumeClaim
                        metadata:
                          name: tekton-scratch-$(pwgen 5 1)-alpha
                          namespace: "{{ inventory_namespace }}"
                        spec:
                          accessModes:
                            - ReadWriteOnce
                          storageClassName: wordpress-nfs-build
                          resources:
                            requests:
                              storage: 50Mi
                        ---
                        apiVersion: tekton.dev/v1beta1
                        kind: PipelineRun
                        metadata:
                          name: "{{ run_pipeline_wp_base_build }}-alpha-$(date -u +%Y%m%d-%H%Mz)"
                          namespace: "{{ inventory_namespace }}"
                        spec:
                          timeout: "1h"
                          serviceAccountName: "{{ wp_base_builder_buildah_service_account }}"
                          pipelineRef:
                            name: "{{ pipeline_name }}"
                          params:
                            - name: explicit-tag
                              value: nightly-$(date -u +%Y%m%d)
                            - name: target-deployment
                              value: wp-nginx-alpha
                            - name: wordpress-version
                              value: latest
                          workspaces:
                            - name: shared-workspace
                              persistentVolumeClaim:
                                claimName: tekton-scratch-alpha
                            - name: dockerconfig
                              secret:
                                secretName: tekton-push
                        EOF
