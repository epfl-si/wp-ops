# Read some data from sites and write report from it
# Usage sample: ./ansible/wpsible -t wp.reports.options -l test_dev -e report_filename=foo.csv
# File will be generated in ansible/.interactive-playbooks/foo.csv
# Generation can be accelerated by:
# 1. set wordpress_facts tags to never in ansible/roles/wordpress-instance/tasks/main.yml
# 2. only use wp-veritas as data source by prefixing the command with 'env WWP_INVENTORY_SOURCES=wpveritas ./ansible/wpsible'

- include_vars: reports-vars.yml

- set_fact:
    _wp_base_url_for_report: "{{ wp_base_url }}"
  tags:
    - wp.reports
    - wp.reports.options
    - wp.reports.search_content

######## Options

- name: Get Wordpress options from site
  command: "{{ wp_cli_command_with_skip }} {{ item.command_name }}"
  with_items:
    - { command_name: option get blogname }
    - { command_name: option get blogdescription }
    - { command_name: pll lang list --field=name --format=csv }
  register: fetched_options
  changed_when: false
  check_mode: no
  tags:
    - wp.reports.options

- name: Write collected data to "{{ report_filename }}"
  run_once: true
  local_action:
    module: copy
    dest: "{{ report_filename }}"
    # ansible_play_hosts is the loop variable, so that we only have
    # lines for WordPresses that succeeded on the previous task. In a
    # different template (e.g. JSON) we could also use
    # `ansible_play_hosts_all` to also report on WordPress instances
    # that had an error (e.g. due to unavailable DB)
    content: |
      name,base_url,title,tagline,languages
      {% for host in ansible_play_hosts %}
      "{{ host }}","{{ hostvars[host]['_wp_base_url_for_report'] }}","{{ hostvars[host]['fetched_options'].results[0].stdout }}","{{ hostvars[host]['fetched_options'].results[1].stdout }}","{{ hostvars[host]['fetched_options'].results[2].stdout_lines | join(', ') }}"
      {% endfor %}
  tags:
    - wp.reports.options

######## ISA content

# Sample usage:
# ./ansible/wpsible -t wp.reports.search_content.isa_content -e report_sites_options_filename_relpath=sites_with_isa_remote_content.csv -l prod_www --prod
- name: Search site db for ISA content
  command: "{{ wp_cli_command_with_skip }} db query \"SELECT CONCAT('{{ wp_base_url }}', post_name) FROM wp_posts WHERE post_type in ('page', 'post') AND post_title != 'Auto Draft' AND post_content LIKE'%isa.epfl.ch/pe%'\" --skip-column-names"
  # OR command: "{{ wp_cli_command_with_skip }} db query \"SELECT CONCAT('{{ wp_base_url }}', post_name) FROM wp_posts WHERE post_type in ('page', 'post') AND post_status = 'publish' AND post_content LIKE'%isa.epfl.ch/pe%'\" --skip-column-names"

  register: isa_fetched_pages
  changed_when: false
  check_mode: no
  tags:
    - wp.reports.search_content.isa_content

- name: Write collected data for ISA content to "{{ report_filename }}"
  run_once: true
  local_action:
    module: copy
    dest: "{{ report_filename }}"
    # ansible_play_hosts is the loop variable, so that we only have
    # lines for WordPresses that succeeded on the previous task. In a
    # different template (e.g. JSON) we could also use
    # `ansible_play_hosts_all` to also report on WordPress instances
    # that had an error (e.g. due to unavailable DB)
    content: |
      base_url,result
      {% for host in ansible_play_hosts %}
      {{ host }},"{{ hostvars[host]['isa_fetched_pages'].stdout }}"
      {% endfor %}
  tags:
    - wp.reports.search_content

######## Infoscience content

- name: Search site db for Infoscience blocks
  command: >
    {{ wp_cli_command_with_skip }} db query "SELECT CONCAT('{{ wp_base_url }}', post_name) FROM wp_posts WHERE post_type in ('page', 'post') AND post_status = 'publish' AND post_content LIKE'%wp:epfl/infoscience-search%'" --skip-column-names
  register: infoscience_fetched_pages
  changed_when: false
  check_mode: no
  when: not lookup("wpveritas", "isDeleted")
  tags:
    - wp.reports.search_content.infoscience_block.report
    - wp.reports.search_content.infoscience_block.refresh_cache

# Sample usage:
# env WWP_INVENTORY_SOURCES=wpveritas ./ansible/wpsible -t wp.reports.search_content.infoscience_block.refresh_cache --prod-only
- name: Refresh cache by trigger an HTTP GET from inside the pod, for all the pages that have an infoscience block
  ansible.builtin.shell:
    cmd: "curl -skL
      -H 'Host: {{ hostvars[inventory_hostname]['wp_hostname'] }}'
      {{ infoscience_fetched_pages.stdout_lines |
       map('regex_replace', 'www.epfl.ch', 'httpd-'+hostvars[inventory_hostname]['wp_env']+':8443') |
       join('?nocache=1 ') + '?nocache=1'
      }} > /dev/null"
  when: (infoscience_fetched_pages.stdout_lines| default([])) | length > 0
  tags:
    - wp.reports.search_content.infoscience_block.refresh_cache

- name: Count the length of the cache table
  command: "{{ wp_cli_command_with_skip }} db query \"SELECT COUNT(ID) FROM wp_epfl_infoscience_cache_db\" --skip-column-names"
  register: infoscience_cache_entries_count
  changed_when: false
  check_mode: no
  when: (infoscience_fetched_pages.stdout_lines| default([])) | length > 0 and 
    not lookup("wpveritas", "isDeleted")
  tags:
    - wp.reports.search_content.infoscience_block.refresh_cache

- name: Fail if the table is empty
  ansible.builtin.fail:
    msg: The cache table for Infoscience is empty ! It should not.
  when: (infoscience_fetched_pages.stdout_lines| default([])) | length > 0 and 
    not lookup("wpveritas", "isDeleted") and
    infoscience_cache_entries_count | int > 0
  tags:
    - wp.reports.search_content.infoscience_block.refresh_cache

# Sample usage:
# env WWP_INVENTORY_SOURCES=wpveritas ./ansible/wpsible -t wp.reports.search_content.infoscience_block.report -e report_filename=sites_with_infoscience_block.csv --prod-only
- name: Write collected data for infoscience block to "{{ report_filename }}"
  run_once: true
  local_action:
    module: copy
    dest: "{{ report_filename }}"
    # ansible_play_hosts is the loop variable, so that we only have
    # lines for WordPresses that succeeded on the previous task. In a
    # different template (e.g. JSON) we could also use
    # `ansible_play_hosts_all` to also report on WordPress instances
    # that had an error (e.g. due to unavailable DB)
    content: |
      {% for host in ansible_play_hosts %}
      {% if hostvars[host]['infoscience_fetched_pages'].stdout| default('') != '' %}
      {{ hostvars[host]['infoscience_fetched_pages'].stdout | regex_replace('	', ',') }}
      {% endif %}
      {% endfor %}
  tags:
    - wp.reports.search_content.infoscience_block.report
