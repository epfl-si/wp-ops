backup_restic_repo_base: >-
  s3:{{ s3_backup.endpoint_url }}/{{ s3_backup.bucket_name }}/{{ backup_aws_s3_prefix }}
# restic's tagging system is just bananas. Segregate the two backup streams entirely
backup_restic_repo_files: "{{ backup_restic_repo_base }}/files"
backup_restic_repo_sql:   "{{ backup_restic_repo_base }}/sql"
backup_restic_cmd: "restic --no-cache"

backup_has_monitoring: '{{ openshift_namespace == "wwp" }}'

backup_restic_environment:
  AWS_ACCESS_KEY_ID:     '{{ lookup("env_secrets", "restic_backup_credentials", "AWS_ACCESS_KEY_ID") }}'
  AWS_SECRET_ACCESS_KEY: '{{ lookup("env_secrets", "restic_backup_credentials", "AWS_SECRET_ACCESS_KEY") }}'
  RESTIC_PASSWORD:       '{{ lookup("env_secrets", "restic_backup_credentials", "RESTIC_PASSWORD") }}'

backup_aws_s3api_list_cmd: "aws --endpoint-url=https://s3.epfl.ch s3api list-objects --bucket {{s3_backup.bucket_name}}"
backup_aws_s3_prefix: "backup/wordpresses/{{ inventory_hostname }}"
backup_aws_s3api_jq_sum_cmd: >-
  jq '.Contents | map(.Size) | add'
backup_aws_s3api_jq_count_cmd: >-
  jq '.Contents | length'

backup_url_label: "{{ wp_base_url | ensure_trailing_slash }}"
backup_curl_to_pushgateway_cmd: >-
  curl -X POST -H "Content-Type: text/plain" --data-binary @-
  {{ monitoring_pushgateway_url }}metrics/job/backup/instance/{{ inventory_hostname }}

backup_bash_stop_on_any_errors: |
  set -o pipefail
  set -e -x

# Used to be as simple as `{{ wp_cli_command }} db export -`, but then
# someone made “improvements” in v2.5.0
# (https://github.com/wp-cli/db-command/issues/195)...
backup_db_to_stdout_command: >-
  mysqldump --no-defaults --skip-column-statistics --no-tablespaces
  --default-character-set=utf8
  $(
  {{ wp_cli_command }} config list --format=json |
  jq -r 'map(.key = .name | del(.name)) | from_entries | "\(.DB_NAME) --host=\(.DB_HOST)
  --user=\(.DB_USER) --password=\(.DB_PASSWORD)"'
  )
