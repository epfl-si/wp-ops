{{/* These variables are set at the top of the original template baked into the image: */}}

{{ $all := . }}
{{ $servers := .Servers }}
{{ $cfg := .Cfg }}
{{ $IsIPV6Enabled := .IsIPV6Enabled }}
{{ $healthzURI := .HealthzURI }}
{{ $backends := .Backends }}
{{ $proxyHeaders := .ProxySetHeaders }}
{{ $addHeaders := .AddHeaders }}

pid {{ .PID }};

error_log stderr;

events {}
daemon off;

http {
	# settings for ngx_http_realip_module
	# set trusted Cloudflare IP ranges (https://www.cloudflare.com/ips/)
	set_real_ip_from 173.245.48.0/20;
	set_real_ip_from 103.21.244.0/22;
	set_real_ip_from 103.22.200.0/22;
	set_real_ip_from 103.31.4.0/22;
	set_real_ip_from 141.101.64.0/18;
	set_real_ip_from 108.162.192.0/18;
	set_real_ip_from 190.93.240.0/20;
	set_real_ip_from 188.114.96.0/20;
	set_real_ip_from 197.234.240.0/22;
	set_real_ip_from 198.41.128.0/17;
	set_real_ip_from 162.158.0.0/15;
	set_real_ip_from 104.16.0.0/13;
	set_real_ip_from 104.24.0.0/14;
	set_real_ip_from 172.64.0.0/13;
	set_real_ip_from 131.0.72.0/22;
	set_real_ip_from 172.69.225.0/24;
	set_real_ip_from 162.158.148.0/24;
	set_real_ip_from 2400:cb00::/32;
	set_real_ip_from 2606:4700::/32;
	set_real_ip_from 2803:f800::/32;
	set_real_ip_from 2405:b500::/32;
	set_real_ip_from 2405:8100::/32;
	set_real_ip_from 2a06:98c0::/29;
	set_real_ip_from 2c0f:f248::/32;
	# set trusted EPFL IP ranges
	set_real_ip_from 10.20.0.0/16;      # prod/test
	set_real_ip_from 128.178.211.0/24;  # prod/test
	real_ip_header X-Forwarded-For;
	real_ip_recursive on;

	include /etc/nginx/mime.types;

	client_body_temp_path /tmp/nginx/client_body;
	proxy_temp_path       /tmp/nginx/proxy;
	fastcgi_temp_path     /tmp/nginx/fastcgi;
	uwsgi_temp_path       /tmp/nginx/uwsgi;
	scgi_temp_path        /tmp/nginx/scgi;
    client_max_body_size  50M;

	{{/* The default values are just too small for WordPress, see
	https://stackoverflow.com/questions/23844761/upstream-sent-too-big-header-while-reading-response-header-from-upstream */}}

	fastcgi_buffers 16 32k;
	fastcgi_buffer_size 64k;
	fastcgi_busy_buffers_size 64k;

	lua_package_path "/etc/nginx/lua/?.lua;;";

	lua_shared_dict certificate_data 20M;
	lua_shared_dict certificate_servers 5M;
	lua_shared_dict configuration_data 20M;

	init_by_lua_block {
		collectgarbage("collect")

		-- init modules
		local ok, res

		ok, res = pcall(require, "configuration")
		if not ok then
		error("require failed: " .. tostring(res))
		else
		configuration = res
		configuration.prohibited_localhost_port = '{{ .StatusPort }}'
		end
	}

	# settings for nginx lua prometheus exporter
	# from https://github.com/knyar/nginx-lua-prometheus?tab=readme-ov-file
	lua_shared_dict prometheus_metrics 10M;

	init_worker_by_lua_block {
	prometheus = require("prometheus").init("prometheus_metrics")

	metric_requests = prometheus:counter(
		"nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
	metric_latency = prometheus:histogram(
		"nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
	metric_connections = prometheus:gauge(
		"nginx_http_connections", "Number of HTTP connections", {"state"})
	}

	log_by_lua_block {
		metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
		metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
	}

	# default server, used for NGINX healthcheck and access to nginx stats
	server {
		listen 127.0.0.1:{{ .StatusPort }};
		set $proxy_upstream_name "internal";

		keepalive_timeout 0;
		gzip off;

		access_log off;

		location /healthz {
			return 200;
		}

		location /nginx_status {
			stub_status on;
		}

		location /configuration {
			client_max_body_size                    21M;
			client_body_buffer_size                 21M;
			proxy_buffering                         off;

			content_by_lua_block {
				configuration.call()
			}
		}

		location / {
			content_by_lua_block {
				ngx.exit(ngx.HTTP_NOT_FOUND)
			}
		}
	}

	# prometheus lua nginx metrics
	server {
		listen 9145;
		location /metrics {
			content_by_lua_block {
				metric_connections:set(ngx.var.connections_reading, {"reading"})
				metric_connections:set(ngx.var.connections_waiting, {"waiting"})
				metric_connections:set(ngx.var.connections_writing, {"writing"})
				prometheus:collect()
			}
		}
	}

	# `wordpress`-class ingress snippets start here.
	{{ range $server := $servers }}
	server {
		server_name {{ buildServerName $server.Hostname }} {{range $server.Aliases }}{{ . }} {{ end }};
		
		error_page 403 500 502 503 504 /global-error/index.php;

		location /global-error/ {
			set $status_code $status;

			if ($query_string ~* "status=(\d+)") {
				set $status_code $1;
			}

			if ($uri ~* "/([^/]+)/(\d+)\.php$") {
				set $status_code $2;
			}

			fastcgi_param STATUS				$status_code;
			fastcgi_param SCRIPT_FILENAME		/wp/wp-error-pages/index.php;
			fastcgi_param QUERY_STRING			$query_string;
			fastcgi_param REQUEST_METHOD		$request_method;
			fastcgi_param REQUEST_URI			$request_uri;
			fastcgi_pass unix:/run/php-fpm/php-fpm.sock;
		}

		{{ $hasRootLocation := false }}

		{{ range $location := $server.Locations }}
			####################### START LOCATION #######################
			{{ $path := buildLocation $location false }}

			# ------------------------------------------------------------- #
			{{ $ing := (getIngressInformation $location.Ingress $server.Hostname $location.IngressPath) }}
				# Namespace      : {{ $ing.Namespace | quote}};
				# Ingress name   : {{ $ing.Rule | quote }};
				# Service name   : {{ $ing.Service | quote }};
				# Service port   : {{ $ing.ServicePort | quote }};
				# Location path  : {{ $ing.Path | escapeLiteralDollar | quote }};
				# Ingress path   : {{ $location.IngressPath | quote }};

			# ------------------------------------------------------------- #

{{/* Verify if ConfigurationSnippet is provided and set as expected when the path is root (/).
     The ConfigurationSnippet may introduce unanticipated values at the root path.
     Ensure that the ingress have a Service name.
     NOTE: Current behavior with root path ConfigurationSnippet is under review,
     and a fix will be included in a future update. */}}
			{{ if and (eq $location.Path "/") (not (empty $ing.Service)) }}
				{{ $hasRootLocation = true }}
				location /robots.txt {
					fastcgi_pass unix:/run/php-fpm/php-fpm.sock;
				}
			{{ end }}

			{{ if (hasPrefix $path "= ") }}

{{/* Generally speaking, the controller emits two Location objects for
     each Ingress object it renders. One of them is an exact match
     (hence the `= ` prefix, above) for the ingress' URL. We use that
     slot in the Location loop to set up a redirect to “repair” a
     “near-miss” URL, such as https://www.epfl.ch/labs/lo (note the
     lack of a trailing slash). In order for relative links (in HTML
     or otherwise) to work properly, we cannot serve these requests
     as-is; we must redirect them. */}}

				{{ if (not (hasSuffix $path "/")) }}
				location {{ $path }} {
					return 301 https://{{ $server.Hostname }}{{ $location.Path }}/;
				}

{{/* Due to the functional indigence of Golang's templating language,
     we *cannot* just chop off the final slash if it was mistakenly
     added at the end of the Ingress `path`. Given that doing nothing
     in such a case makes a tiny amount of sense (i.e. if whomever
     wrote the Ingress object added a final slash, it could be
     construed to mean that they don't want to deal with the
     “near-miss” URL), nothing is exactly what we do. */}}

				{{ end }}
			{{ else if and (not (empty $location.ConfigurationSnippet)) (not (empty $ing.Service)) }}

{{/* Render the nginx config for the “main” Location object passed by the controller. */}}
				location {{ $path }} {
					include "/etc/nginx/template/wordpress_fastcgi.conf";

					{{/* TODO: this “if” clause is temporary, and can be removed (i.e.
					     we will always want the snippet inside) once all Ingresses
					     have been converted to the “slim” format, as per
					     https://github.com/epfl-si/wp-operator/pull/59 et al.

					     Note how everything else here is carefully crafted to clash “the
					     right way” with the “long-form” Ingresses, so that everything just
					     works (if a tad slower) during the migration period. nginx
					     configuration snippets that are honored on a first-one-wins basis,
					     such as regex-based locations, come before the ConfigurationSnippet;
					     whereas last-one-wins statements, such as `fastcgi_param`, come after
					     it. */}}
					{{ if not (contains $location.ConfigurationSnippet "wp-content/uploads") }}
					location ~ (wp-content/uploads)/ {
						{{ $uploads_dirname := (index $ing.Annotations "wordpress.epfl.ch/nginx-uploads-dirname") }}
                                                {{ if not (empty $uploads_dirname) }}
						rewrite .*/(wp-content/uploads/(.*)) /$2 break;
						root /wp-data/{{ $uploads_dirname }}/uploads;
						add_header Cache-Control "129600, public";
						{{ else }}
						fastcgi_pass unix:/run/php-fpm/php-fpm.sock;
						{{ end }}
					}
					{{ end }}

					{{/* TODO: likewise this “if” clause will become always true, and therefore
                                             will need to be removed, after completing the migration. */}}
					{{ if (not (contains $location.ConfigurationSnippet "/wp-admin {")) }}
					location = {{ $path }}wp-admin {
						return 301 https://{{ buildServerName $server.Hostname }}{{ $path }}wp-admin/;
					}
					{{ end }}

					location ~ (wp-includes|wp-admin|wp-content/(plugins|mu-plugins|themes))/ {
						rewrite .*/((wp-includes|wp-admin|wp-content/(plugins|mu-plugins|themes))/.*) /$1 break;
						root /wp/;
						location ~* \\.(ico|pdf|apng|avif|webp|jpg|jpeg|png|gif|svg)$ {
							add_header Cache-Control "129600, public";
							# rewrite is not inherited https://stackoverflow.com/a/32126596
							rewrite .*/((wp-includes|wp-admin|wp-content/(plugins|mu-plugins|themes))/.*) /$1 break;
						}
					}

					{{ $location.ConfigurationSnippet }}
                                        fastcgi_param WP_ABSPATH         /wp/;
				}

			{{ else }}

{{/* This is a supplemental Location that the controller emits as a
     catch-all, typically for /. Nothing to see here (we have our
     own catch-all below). */}}

			{{ end }}
			######################## END LOCATION ########################
		{{ end }}
		{{ $server.ServerSnippet }}

		{{ if not $hasRootLocation }}
			# `wordpress`-class ingress snippets end here.

			# Catch-all in the (unlikely) case where there is no WordPress
				# at the root of the domain:
			location / {
				# Remove OpenResty ad-ware
				return 404;
			}
		{{ end }}
	}
	{{ end }}
}

{{/* The controller wants to talk to us about TCP and UDP streams, but we
     don't use them. */}}

stream {
	server {
		listen 127.0.0.1:{{ .StreamPort }};

		access_log off;

		content_by_lua_block {
                  local sock, err = ngx.req.socket(true)
		  if not sock then
		    ngx.log(ngx.ERR, "failed to get raw req socket: ", err)
		    ngx.say("error: ", err)
		  else
		    local reader = sock:receiveuntil("\r\n")
		    local _, err_read = reader()                  -- Whatever you say, dear
		    if err_read then
		      ngx.log(ngx.ERR, "could not read TCP/UDP dynamic-configuration:", err_read)
		      ngx.say("error: ", err_read)
		    end
		  end
		}
	}
}
